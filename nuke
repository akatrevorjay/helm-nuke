#!/usr/bin/env zsh
set -eo pipefail

autoload -Uz colors; colors

ef() {
  printf "${bold_color}${fg[white]}$1${reset_color}" "${@:2}"
}

e() {
  ef "$1\n" "${@:2}"
}

usage() {
  echo "${0:t}: Nukes all releases and tiller managed k8s objects it finds afterwards."
}

if [ $# -gt 0 ]; then
  case $1 in
    -h|--help) usage >&2; exit 0 ;;
    *) usage >&2; exit 1 ;;
  esac
fi

delete-rogue() {
  e '%s' "Deleting any rogue k8s objects"
  local namespaces=($(kubectl get namespace -o name))
  namespaces=(${namespaces#namespaces/})

  local ns i
  for ns in $namespaces; do
    case $ns in
      kube*) continue ;;
    esac

    for i in deployment service job replicaset pod secret configmap pvc; do
      ef '- [%s:%ss]: ' $ns $i
      kubectl --namespace=$ns delete $i -l heritage=Tiller &
    done
  done

  ef '- [%ss]: ' "kube-system:configmap"
  kubectl -n kube-system delete configmap --selector=OWNER=TILLER &

  wait
}

helm=($HELM_BIN --host $TILLER_HOST)
releases_raw=$(helm list --short)
releases=(${(f)releases_raw})

e "${fg[red]}${fg[white]} %s${reset_color} %s" "Deleting releases:" "${releases:-<none>}"
echo

if [ $#releases -gt 0 ]; then
  for r in $releases; do
    ef "[release:%s]: " $r
    $helm delete --purge $r

    echo -e "${fg[red]}${fg[white]} release $r deleted.${reset_color}"
  done
  echo
fi

delete-rogue
echo

e "${fg[green]}%s" "Done!"
