#!/usr/bin/env zsh
set -eo pipefail

autoload -Uz colors; colors

ef() {
  printf "${bold_color}${fg[white]}$1${reset_color}" "${@:2}"
}

e() {
  ef "$1\n" "${@:2}"
}

usage() {
  echo "${0:t}: Nukes all releases and tiller managed k8s objects it finds afterwards."
  echo "    --dry-run | -X	    Echo the commands instead of running them."
  echo "    --help | -h		    This help."
}

local -U o_help=() o_dry_run=()
zparseopts -D -K 'h=o_help' '-help=o_help' 'D=o_dry_run' '-dry-run=o_dry_run'

dry=()
if [[ -n $o_dry_run ]]; then
  echo "This is a dry run."
  dry=(echo)
fi

if [[ -n $o_help ]]; then
  usage
  exit 0
fi

if [[ $# -gt 0 ]]; then
  echo "Error: Bad options:" "$@" >&2

  usage >&2
  exit 1
fi

delete-rogue() {
  e '%s' "Deleting any rogue k8s objects"
  local namespaces=($(kubectl get namespace -o name))
  namespaces=(${namespaces#namespaces/})

  local ns i
  for ns in $namespaces; do
    case $ns in
      kube*) continue ;;
    esac

    for i in deployment service job replicaset pod secret configmap pvc; do
      ef '- [%s:%ss]: ' $ns $i
      $dry kubectl --namespace=$ns delete $i -l heritage=Tiller &
    done
  done

  ef '- [%ss]: ' "kube-system:configmap"
  $dry kubectl -n kube-system delete configmap --selector=OWNER=TILLER &

  wait
}

helm=($dry $HELM_BIN --host $TILLER_HOST)
releases_raw=$(helm list --short)
releases=(${(f)releases_raw})

e "Deleting releases: %s" "${releases:-<none>}"
echo

if [ $#releases -gt 0 ]; then
  for r in $releases; do
    (){
      $helm delete --purge $r && \
        echo -e "${fg[red]}ÔÄç${fg[white]} release $r deleted.${reset_color}"
    } &
  done

  wait

  echo
fi

delete-rogue
echo

e "${fg[green]}%s" "Done!"
